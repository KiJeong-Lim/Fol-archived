
@book{enderton2001,
  title     = {A Mathematical Introduction to Logic},
  author    = {Herbert B. Enderton},
  isbn      = {978-0-12-238452-3},
  year      = {2001},
  publisher = {Academic Press},
}

@phdthesis{ilik2010,
author       = {Danko Ilik},
title        = {Constructive Completeness Proofs and Delimited Control. (Preuves constructives de compl{\'{e}}tude et contr{\^{o}}le d{\'{e}}limit{\'{e}})},
school       = {{\'{E}}cole Polytechnique, Palaiseau, France},
year         = {2010},
url          = {https://tel.archives-ouvertes.fr/tel-00529021},
timestamp    = {Tue, 21 Jul 2020 00:40:36 +0200},
biburl       = {https://dblp.org/rec/phd/hal/Ilik10.bib},
bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{forster2021,
author    = {Yannick Forster and Dominik Kirst and Dominik Wehr},
title     = {Completeness Theorems for First-Order Logic Analysed in Constructive Type Theory: Extended Version},
journal   = {Journal of Logic and Computation},
volume    = {31},
number    = {1},
pages     = {112--151},
year      = {2021},
month     = {January},
doi       = {10.1093/logcom/exaa073},
note      = {Saarland University, Saarland Informatics Campus, Saarbr{\"u}cken, Germany. Institute for Logic, Language and Computation, University of Amsterdam, The Netherlands}
}

@article{herberlin2017,
author    = {Hugo Herberlin and SunYoung Kim and Gyesik Lee},
title     = {FORMALIZING THE META-THEORY OF FIRST-ORDER PREDICATE LOGIC},
journal   = {Journal of the Korean Mathematical Society},
volume    = {54},
number    = {5},
pages     = {1521--1536},
year      = {2017},
month     = {September},
doi       = {10.4134/JKMS.J160546},
note      = {대한수학회}
}

@inproceedings{halkjaer2022,
author    = {Asta Halkj{\ae}r From},
title     = {A Succinct Formalization of the Completeness of First-Order Logic},
booktitle = {Proceedings of the 27th International Conference on Types for Proofs and Programs (TYPES 2021)},
series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
volume    = {239},
pages     = {8:1--8:24},
year      = {2022},
publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
doi       = {10.4230/LIPIcs.TYPES.2021.8}
}

@article{constable2014,
author    = {Robert Constable and Mark Bickford},
title     = {Intuitionistic Completeness of First-Order Logic},
journal   = {Annals of Pure and Applied Logic},
volume    = {165},
number    = {1},
pages     = {164--198},
year      = {2014},
note      = {The Constructive in Logic and Applications},
issn      = {0168-0072},
doi       = {10.1016/j.apal.2013.07.009},
url       = {https://www.sciencedirect.com/science/article/pii/S0168007213001085},
keywords  = {BHK semantics, Completeness, Constructive type theory, Evidence semantics, Intersection type, Intuitionistic logic},
abstract  = {We constructively prove completeness for intuitionistic first-order logic, iFOL, showing that a formula is provable in iFOL if and only if it is uniformly valid in intuitionistic evidence semantics as defined in intuitionistic type theory extended with an intersection operator. Our completeness proof provides an effective procedure that converts any uniform evidence into a formal iFOL proof. Uniform evidence can involve arbitrary concepts from type theory such as ordinals, topological structures, algebras and so forth. We have implemented that procedure in the Nuprl proof assistant. Our result demonstrates the value of uniform validity as a semantic notion for studying logical theories, and it provides new techniques for showing that formulas are not intuitionistically provable. Here we demonstrate its value for minimal and intuitionistic first-order logic.}
}

@article{copello2017,
author    = {Ernesto Copello and Nora Szasz and Álvaro Tasistro},
title     = {Formal Metatheory of the Lambda Calculus Using Stoughton's Substitution},
journal   = {Theoretical Computer Science},
volume    = {685},
pages     = {65--82},
year      = {2017},
note      = {Logical and Semantic Frameworks with Applications},
issn      = {0304-3975},
doi       = {10.1016/j.tcs.2016.08.025},
url       = {https://www.sciencedirect.com/science/article/pii/S0304397516304820},
keywords  = {Formal metatheory, Lambda calculus, Type Theory},
abstract  = {We develop metatheory of the Lambda calculus in Constructive Type Theory, using a first-order presentation with one sort of names for both free and bound variables and without identifying terms up to α-conversion. Concerning β-reduction, we prove the Church–Rosser theorem and the Subject Reduction theorem for the system of assignment of simple types. It is thereby shown that this concrete approach allows for gentle full formalisation, thanks to the use of an appropriate notion of substitution due to A. Stoughton. The whole development has been machine-checked using the system Agda.}
}

@book{o2009incompleteness,
title={Incompleteness \& completeness: formalizing logic and analysis in type theory},
author={O'Connor, Russell SS},
year={2009},
publisher={Sl: sn}
}

@article{hur2023,
author = {Song, Youngju and Cho, Minki and Lee, Dongjae and Hur, Chung-Kil and Sammler, Michael and Dreyer, Derek},
title = {Conditional Contextual Refinement},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571232},
doi = {10.1145/3571232},
abstract = {Much work in formal verification of low-level systems is based on one of two approaches: refinement or separation logic. These two approaches have complementary benefits: refinement supports the use of programs as specifications, as well as transitive composition of proofs, whereas separation logic supports conditional specifications, as well as modular ownership reasoning about shared state. A number of verification frameworks employ these techniques in tandem, but in all such cases the benefits of the two techniques remain separate. For example, in frameworks that use relational separation logic to prove contextual refinement, the relational separation logic judgment does not support transitive composition of proofs, while the contextual refinement judgment does not support conditional specifications.  
In this paper, we propose Conditional Contextual Refinement (or CCR, for short), the first verification system to not only combine refinement and separation logic in a single framework but also to truly marry them together into a unified mechanism enjoying all the benefits of refinement and separation logic simultaneously. Specifically, unlike in prior work, CCR’s refinement specifications are both conditional (with separation logic pre- and post-conditions) and transitively composable. We implement CCR in Coq and evaluate its effectiveness on a range of interesting examples.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {39},
numpages = {31},
keywords = {verification, separation logic, contextual refinement, Coq}
}

@article{imp,
author  = {Peter Lammich and Simon Wimmer},
title   = {IMP2 – Simple Program Verification in Isabelle/HOL},
journal = {Archive of Formal Proofs},
month   = {January},
year    = {2019},
note    = {\url{https://isa-afp.org/entries/IMP2.html}, Formal proof development},
ISSN    = {2150-914x},
}

@article{iris,
author = {Jung, Ralf and Swasey, David and Sieczkowski, Filip and Svendsen, Kasper and Turon, Aaron and Birkedal, Lars and Dreyer, Derek},
title = {Iris: Monoids and Invariants as an Orthogonal Basis for Concurrent Reasoning},
year = {2015},
issue_date = {January 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2775051.2676980},
doi = {10.1145/2775051.2676980},
abstract = {We present Iris, a concurrent separation logic with a simple premise: monoids and invariants are all you need. Partial commutative monoids enable us to express---and invariants enable us to enforce---user-defined *protocols* on shared state, which are at the conceptual core of most recent program logics for concurrency. Furthermore, through a novel extension of the concept of a *view shift*, Iris supports the encoding of *logically atomic specifications*, i.e., Hoare-style specs that permit the client of an operation to treat the operation essentially as if it were atomic, even if it is not.},
journal = {SIGPLAN Not.},
month = jan,
pages = {637–650},
numpages = {14},
keywords = {separation logic, partial commutative monoids, invariants, higher-order logic, fine-grained concurrency, compositional verification, atomicity}
}

@inproceedings{compcert,
author = {Xavier Leroy and Sandrine Blazy and Daniel K\"astner and Bernhard Schommer and Markus Pister and Christian Ferdinand},
title = {CompCert -- A Formally Verified Optimizing Compiler},
booktitle = {ERTS 2016: Embedded Real Time Software and Systems},
publisher = {SEE},
year = 2016,
url = {http://xavierleroy.org/publi/erts2016_compcert.pdf},
hal = {https://hal.inria.fr/hal-01238879},
xtopic = {compcert},
abstract = {CompCert is the first commercially available 
optimizing compiler that is formally verified, using machine-assisted
mathematical proofs, to be exempt from mis-compilation.
The executable code it produces is proved
to behave exactly as specified by the semantics of the
source C program. This article gives an overview of
the design of CompCert and its proof concept and then
focuses on aspects relevant for industrial application.
We briefly summarize practical experience and give an
overview of recent CompCert development aiming at industrial usage.
CompCert’s intended use is the compilation of life-critical
and mission-critical software meeting high levels of assurance.
In this context tool qualification is of paramount importance. We
summarize the confidence argument of CompCert and give an overview of
relevant qualification strategies.}
}

@misc{coqrepo,
author        = {KiJeong Lim},
title         = {Fol-archived},
howpublished  = {\url{https://github.com/KiJeong-Lim/Fol-archived}},
}
